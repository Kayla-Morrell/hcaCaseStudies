% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cache.R
\name{cache}
\alias{cache}
\alias{cache_exists}
\alias{cache_list}
\alias{cache_add}
\alias{cache_read}
\alias{cache_remove}
\title{Cache of Computationally Expensive Objects for Reuse}
\usage{
cache(create = TRUE)

cache_exists(project_id, object_name)

cache_list()

cache_add(
  object,
  project_id,
  object_name,
  writer_function = saveRDS,
  ...,
  overwrite = FALSE
)

cache_read(project_id, object_name, reader_function = readRDS, ...)

cache_remove(project_id, object_name)
}
\arguments{
\item{create}{\code{logical(1)} create the cache if it does not exist?
Default: \code{TRUE}.}

\item{project_id}{\code{character(1)} project identifier, e.g.,
\code{"3c9d586e-bd26-4b46-8690-3faaa18ccf38"}.}

\item{object_name}{character(1) arbitrary object identifier. Cached
objects created in Case Study vignettes are prefixed
\code{"local."}, e.g., \code{"local.countMatrix"}.}

\item{object}{Any \emph{R} object.}

\item{writer_function}{a function taking as it's first argument
\code{object}, a second argument the cache file path (determined
internally) to store the object, and any additional arguments
(\code{...} in \code{cache_add()}) required to write the object.}

\item{...}{in \code{cache_read()}, \code{...} are arguments passed to
'reader_function()`.}

\item{overwrite}{logical(1) overwrite an existing object in the
cache? With the default \code{FALSE}, attempts to write the object
result in an error.}

\item{reader_function}{a function taking as it's first argument the
cache file path (determined internally) of the object, and any
additional arguments (\code{...} in \code{cache_add()}) required to write
the object.}
}
\value{
\code{cache()} returns a \code{BiocFileCache} object that can be
manipulated using the interface defined in the BiocFileCache
package.

\code{cache_exists()} returns a logical(1) value, TRUE when the
object identified by \code{projectId} and \code{object_name} exists in
the cache.

\code{cache_list()} returns a tibble with two columns: the
\code{project_id} and \code{object_name} of objects in the cache. These
can be use in, e.g., \code{cache_read()} and \code{cache_remove()}.

\code{cache_add()} returns, invisibly, the cache file path where
the object is stored.

\code{cache_read()} returns the value returned by
\code{reader_function()}.

\code{cache_remove()} warns if the object is not in the cache,
and returns \code{FALSE} invisibly, or removes the object and
returns \code{TRUE} invisibly.
}
\description{
\code{cache()} creates and / or returns a 'BiocFileCache'
object containing information about objects in the
package-specific cache.

\code{cache_exists()} tests whether an object exists in the
cache. The object is identified by the concatentation of the
\code{project_id} and \code{object_name} argument.

\code{cache_list()} summarizes project objects available in
the cache.

\code{cache_add()} adds \code{object} to the cache, using
\code{project_id} and \code{object_name} to create an identifier. The
\code{writer_function} is used to save the object to the cache.

\code{cache_read()} retrieves an object from the cache,
using \code{project_id} and \code{object_name} to create an
identifier. The \code{reader_function} is used to read the object
into \emph{R}.

\code{cache_remove()} removes an object from the cache.
}
\examples{
cache()

faux_project_id <- "XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX"
faux_object_name <- "local.fauxObject"

cache_exists(faux_project_id, faux_object_name)

cache_list()

cache_exists(faux_project_id, faux_object_name)       # FALSE
cache_add(letters, faux_project_id, faux_object_name)
cache_exists(faux_project_id, faux_object_name)       # TRUE

cache_read(faux_project_id, faux_object_name)

cache_remove(faux_project_id, faux_object_name)
cache_exists(faux_project_id, faux_object_name)       # FALSE

}
